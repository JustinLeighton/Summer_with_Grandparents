library(digest)
library(gridExtra)
install.packages("gridExtra")
library(digest)
library(gridExtra)
library(grid)
# Code
Code <- "password123"
Code
# Hash Formula
Hash <- digest("5110791000024554","sha512",serialize = FALSE)
Hash
Hash <- digest(Code,"sha512",serialize = FALSE)
Hash
strtoi(unlist(strsplit(gsub("(.{2})","\\1 ",Hash),split=" ")), base=16)
strtoi(unlist(strsplit(gsub("(.{2})","\\1 ",Hash),split=" ")), base=8)
spcl <- c("!", "@", "#", "$", "%", "^", "&", "*", "?", "_", "-", "+", "=")
num <- c(0:9)
spcl
letters
LETTERS
num
spcl
rand1
comb1[rand1]
source("C:/Users/Justin Leighton/Desktop/Development/Password Card Generator/Password Card Generator.R", echo=TRUE)
comb1 <- c(num, num, num, num, num, spcl, spcl, letters, LETTERS)
comb1
comb1 <- c(num, num, num, num, num, spcl, spcl, letters, LETTERS)
comb1
strtoi
hash_set <- strtoi(unlist(strsplit(gsub("(.{2})","\\1 ",Hash),split=" ")), base=16)
hash_set
c(comb1, comb1)[strtoi(unlist(strsplit(gsub("(.{2})","\\1 ",Hash),split=" ")), base=16)]
Hash
charset, charset)[strtoi(unlist(strsplit(gsub("(.{2})","\\1 ",Hash),split=" ")), base=16)]
c(charset, charset)[strtoi(unlist(strsplit(gsub("(.{2})","\\1 ",Hash),split=" ")), base=16)]
# Output lists
charset <- c(num, num, num, num, num, spcl, spcl, letters, LETTERS)
c(charset, charset)[strtoi(unlist(strsplit(gsub("(.{2})","\\1 ",Hash),split=" ")), base=16)]
df[1:9]
data.frame(df[1:9],df[10:18],df[19:27],df[28:36],df[37:45],df[46:54],df[55:63],
df[64:72],df[73:81],df[82:90],df[91:99],df[100:108],df[109:117],df[118:126],
df[127:135],df[136:144],df[145:153],df[154:162],df[163:171],df[172:180],df[181:189],
df[190:198],df[199:207],df[208:216],df[217:225],df[226:234],df[235:243],df[244:252],
df[253:261],df[262:270],df[271:279],df[280:288],df[289:297],df[298:306],df[307:315],
df[316:324],df[325:333],df[334:342],df[343:351],df[352:360],df[361:369],df[370:378],
df[379:387],df[388:396],df[397:405],df[406:414],df[415:423],df[424:432],df[433:441],
df[442:450],df[451:459],df[460:468],df[469:477],df[478:486],df[487:495],df[496:504])
df
# Output lists
charset1 <- c(num, num, num, num, num, spcl, spcl, letters, LETTERS) # Special characters
charset2 <- c(num, num, num, num, num, letters, letters, LETTERS) # No special characters
side1 <- c(charset1, charset1)[strtoi(unlist(strsplit(gsub("(.{2})","\\1 ",Hash),split=" ")), base=16)]
side2 <- c(charset2, charset2)[strtoi(unlist(strsplit(gsub("(.{2})","\\1 ",Hash),split=" ")), base=16)]
side1
side2
for(i in 1:4){
print(i)
}
side1
Hash
strtoi(unlist(strsplit(gsub("(.{2})","\\1 ",Hash)
strsplit(gsub("(.{2})","\\1 ",Hash)
strsplit(gsub("(.{2})","\\1 ",Hash)
strsplit(gsub("(.{2})","\\1 ",Hash)
source("C:/Users/Justin Leighton/Desktop/Development/Password Card Generator/Password Card Generator.R", echo=TRUE)
# Output lists
charset1 <- c(num, num, num, num, num, spcl, spcl, letters, LETTERS) # Special characters
charset2 <- c(num, num, num, num, num, letters, letters, LETTERS) # No special characters
side1 <- c()
side2 <- c()
library(digest)
library(gridExtra)
library(grid)
# Code
Code <- "password123"
# Hash Formula
Hash <- digest(Code,"sha512",serialize = FALSE)
# Convert base 16 to base 10
hash_set <- strtoi(unlist(strsplit(gsub("(.{2})","\\1 ",Hash),split=" ")), base=16)
# Table Generation
spcl <- c("!", "@", "#", "$", "%", "^", "&", "*", "?", "_", "-", "+", "=")
num <- c(0:9)
# Output lists
charset1 <- c(num, num, num, num, num, spcl, spcl, letters, LETTERS) # Special characters
charset2 <- c(num, num, num, num, num, letters, letters, LETTERS) # No special characters
side1 <- c()
side2 <- c()
gsub("(.{2})","\\1 ",Hash)
hash_set
hash_set
hash_set+1
hash_set+1%%256
hash_set+1%%12
hash_set+1 % 12
hash_set+1 %% 12
mod(hash_set+1,256)
mod(hash_set+1,1)
outer(hash_set, 10, '%%')
c(outer(hash_set, 10, '%%'))
c(outer(hash_set, 256, '%%'))
len(charset1)
length(charset1)
length(charset2)
# Output lists
charset1 <- c(num, num, num, num, num, spcl, spcl, letters, LETTERS) # Special characters
charset2 <- c(num, num, num, num, num, letters, letters, LETTERS) # No special characters
side1 <- c()
side2 <- c()
for(i in 0:3){
set = c(outer(hash_set+i, 256, '%%'))
side1 <- c(side1, c(charset1, charset1)[set])
side2 <- c(side2, c(charset2, charset2)[set])
}
side1
length(side1)
length(side2)
side1 <- c(side1, c(charset1, charset1)[set])
length(side2)
side1 <- c()
side1 <- c(side1, c(charset1, charset1)[set])
length(side2)
c(charset1, charset1)[set]
side1 <- c()
side1
c(side1, c(charset1, charset1)[set])
side1 <- c(side1, c(charset1, charset1)[set])
length(side1)
set
len(set)
length(set)
c(charset1, charset1)[set]
length(c(charset1, charset1))
side1 <- c()
side2 <- c()
for(i in 1:4){
set = c(outer(hash_set+i, 256, '%%'))
side1 <- c(side1, c(charset1, charset1)[set])
side2 <- c(side2, c(charset2, charset2)[set])
}
side1
length(side1)
length(side2)
side1 <- c()
side2 <- c()
for(i in 1:4){
set = c(outer(hash_set+i, 257, '%%'))
side1 <- c(side1, c(charset1, charset1)[set])
side2 <- c(side2, c(charset2, charset2)[set])
}
side1
length(side1)
set
print(min(set))
for(i in 1:4){
set = c(outer(hash_set+i, 257, '%%'))
print(min(set))
side1 <- c(side1, c(charset1, charset1)[set])
side2 <- c(side2, c(charset2, charset2)[set])
}
side1 <- c()
side2 <- c()
for(i in 1:4){
set = c(outer(hash_set+i, 256, '%%'))+1
print(min(set))
side1 <- c(side1, c(charset1, charset1)[set])
side2 <- c(side2, c(charset2, charset2)[set])
}
length(side1)
length(side2)
hash_set
library(digest)
library(gridExtra)
library(grid)
# Code
Code <- "password123"
# Hash Formula
Hash <- digest(Code,"sha512",serialize = FALSE)
# Convert hash value to vector of length 64 in base 10
hash_set <- strtoi(unlist(strsplit(gsub("(.{2})","\\1 ",Hash),split=" ")), base=16)
# Character sets
spcl <- c("!", "@", "#", "$", "%", "^", "&", "*", "?", "_", "-", "+", "=")
num <- c(0:9)
charset1 <- c(num, num, num, num, num, spcl, spcl, letters, LETTERS) # Special characters
charset2 <- c(num, num, num, num, num, letters, letters, LETTERS) # No special characters
# Generate card sides
card <- c()
for(i in 1:8){
if(i<=4){
values <- c(charset1, charset1)[set]
}else{
values <- c(charset2, charset2)[set]
}
set <- c(outer(hash_set+(i%%4), 256, '%%'))+1
card <- c(card, values)
}
card
length(card)
matrix(card, ncol=26, byrow=TRUE)
matrix(card, ncol=28, byrow=TRUE)
library(tidyverse)
512%%26
512%%28
512%%29
512%%28
# Generate card sides
card <- c()
for(i in 1:8){
if(i<=4){
values <- c(charset1, charset1)[set]
}else{
values <- c(charset2, charset2)[set]
}
set <- c(outer(hash_set+(i%%4), 256, '%%'))
card <- c(card, values)
}
# Building Table
df <- card %>%
matrix(ncol=28, byrow=TRUE) %>%
as.data.frame(stringsAsFactors=FALSE) %>%
`colnames<-`(c(letters,'!','?',letters,'!','?'))
values[1:(length(values)-1)]
values
# Generate card sides
card <- c()
for(i in 1:8){
if(i<=4){
values <- c(charset1, charset1)[set]
}else{
values <- c(charset2, charset2)[set]
}
set <- c(outer(hash_set+(i%%4), 256, '%%'))+1
card <- c(card, values[1:(length(values)-1)])
}
length(card)
# Generate card sides
card <- c()
for(i in 1:8){
if(i<=4){
values <- c(charset1, charset1)[set]
}else{
values <- c(charset2, charset2)[set]
}
set <- c(outer(hash_set+(i%%4), 256, '%%'))+1
card <- c(card, values)
}
print(length(card))
504%%28
values[set]
values
set
Hash
gsub("(.{2})","\\1 ",Hash)
strsplit(gsub("(.{2})","\\1 ",Hash),split=" ")
unlist(strsplit(gsub("(.{2})","\\1 ",Hash),split=" "))
Hash %>%
gsub("(.{2})","\\1 ", .)
Hash %>%
gsub("(.{2})","\\1 ", .) %>%
strsplit(split=" ") %>%
unlist() %<%
strtoi(base=16)
Hash %>%
gsub("(.{2})","\\1 ", .) %>%
strsplit(split=" ") %>%
unlist() %>%
strtoi(base=16)
spcl <- c("!", "@", "#", "$", "%", "^", "&", "*", "?", "_", "-", "+", "=")
num <- c(0:9)
charset1 <- c(num, num, num, num, num, spcl, spcl, letters, LETTERS) # Special characters
charset2 <- c(num, num, num, num, num, letters, letters, LETTERS) # No special characters
# Generate card sides
card <- c()
for(i in 1:8){
if(i<=4){
values <- c(charset1, charset1)[set]
}else{
values <- c(charset2, charset2)[set]
}
set <- c(outer(hash_set+(i%%4), 256, '%%'))+1
values <- values[set]
card <- c(card, values[1:(length(values)-1)]) # Exclude last value to end with 504 values instead of 512
}
card
# Character sets
spcl <- c("!", "@", "#", "$", "%", "^", "&", "*", "?", "_", "-", "+", "=")
num <- c(0:9)
charset1 <- c(num, num, num, num, num, spcl, spcl, letters, LETTERS) # Special characters
charset2 <- c(num, num, num, num, num, letters, letters, LETTERS) # No special characters
# Generate card sides
card <- c()
for(i in 1:8){
if(i<=4){
values <- c(charset1, charset1)[set]
}else{
values <- c(charset2, charset2)[set]
}
set <- c(outer(hash_set+(i%%4), 256, '%%'))+1
card <- c(card, values[1:(length(values)-1)]) # Exclude last value to end with 504 values instead of 512
}
card
set
# Generate Cards
colors <- c("#ffb3ba","#ffdfba","#ffffba","#baffc9","#bae1ff","#e3c6f0","#ffffff","#bbbbbb","#654321")
t <- ttheme_default(core=list(bg_params = list(fill=colors)))
grid.table(df[1:28],rows=NULL,theme=t)
grid.newpage()
grid.table(df[29:56],rows=NULL,theme=t)
50*26
png("side1.png", height = 500, width = 1300)
grid.table(df[1:28],rows=NULL,theme=t)
grid.newpage()
png("side2.png", height = 500, width = 1300)
grid.table(df[29:56],rows=NULL,theme=t)
dev.off()
ls()
getwd()
grid.table(df[1:28],rows=NULL,theme=t)
png("side1.png", height = 500, width = 1300)
grid.newpage()
grid.table(df[29:56],rows=NULL,theme=t)
png("side2.png", height = 500, width = 1300)
dev.off()
png("side1.png", height = 500, width = 1300)
grid.table(df[1:28],rows=NULL,theme=t)
png("side1.png", height = 500, width = 1300)
p<-grid.table(df[1:28],rows=NULL,theme=t)
grid.arrange(p)
dev.off()
grid.newpage()
png("side2.png", height = 500, width = 1300)
p<-grid.table(df[29:56],rows=NULL,theme=t)
grid.arrange(p)
dev.off()
png("side1.png", height = 500, width = 1300)
p<-grid.table(df[1:28],rows=NULL,theme=t)
grid.arrange(p)
grid.table(df[1:28],rows=NULL,theme=t)
grid.newpage()
grid.table(df[1:28],rows=NULL,theme=t)
g <- arrangeGrob(grid.table(df[1:28],rows=NULL,theme=t))
ggsave(file="side1.png", g)
setwd('C:/Users/Justin Leighton/Desktop/Development/Summer_with_Grandparents')
